{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","registerServiceWorker.js","index.js"],"names":["Titles","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","setState","main","temp","sys","weather","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"6RAmBeA,EAjBA,kBACX,6BACE,wBAAIC,UAAU,0BAAd,mBACA,uBAAGA,UAAU,6BAAb,iDCmBSC,EArBF,SAAAC,GAAK,OAChB,0BAAMC,SAAUD,EAAME,YACpB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9C,iDC+CWC,EAhDC,SAAAN,GAAK,OAEb,6BAEIA,EAAMO,MAAQP,EAAMQ,SACpB,uBAAGV,UAAU,gBAAb,YACI,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMO,KAAzC,KAAiDP,EAAMQ,UAI3DR,EAAMS,aACN,uBAAGX,UAAU,gBAAb,gBACI,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMS,cAI7CT,EAAMU,UACN,uBAAGZ,UAAU,gBAAb,YACI,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMU,WAI7CV,EAAMW,aACN,uBAAGb,UAAU,gBAAb,YACI,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMW,cAI7CX,EAAMY,OACN,uBAAGd,UAAU,gBACT,8BAAOE,EAAMY,UC/BvBC,EAAU,mCAoEDC,E,2MA3DbC,MAAQ,CACFN,iBAAYO,EACZT,UAAKS,EACLR,aAAQQ,EACRN,cAASM,EACTL,iBAAYK,EACZJ,MAAM,I,EAEZV,W,uCAAa,WAAOe,GAAP,qBAAAC,EAAA,6DACXD,EAAEE,iBACIZ,EAAOU,EAAEG,OAAOC,SAASd,KAAKe,MAC9Bd,EAAUS,EAAEG,OAAOC,SAASb,QAAQc,MAH/B,SAIYC,MAAM,oDAAD,OAAqDhB,EAArD,YAA6DC,EAA7D,kBAA8EK,EAA9E,kBAJjB,cAILW,EAJK,gBAKQA,EAASC,OALjB,OAKLC,EALK,OAMPnB,GAAQC,EAEZ,EAAKmB,SAAS,CACZlB,YAAYiB,EAAKE,KAAKC,KACtBtB,KAAKmB,EAAKtB,KACVI,QAAQkB,EAAKI,IAAItB,QACjBE,SAASgB,EAAKE,KAAKlB,SACnBC,YAAYe,EAAKK,QAAQ,GAAGpB,YAC5BC,MAAM,KAGN,EAAKe,SAAS,CACZf,MAAM,uCAlBC,4C,8HAuBX,OACE,6BACA,yBAAKd,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,4BACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,2BACb,kBAAC,EAAD,CAAMI,WAAY8B,KAAK9B,aACvB,kBAAC,EAAD,CACEO,YAAauB,KAAKjB,MAAMN,YACxBC,SAAUsB,KAAKjB,MAAML,SACrBH,KAAMyB,KAAKjB,MAAMR,KACjBC,QAASwB,KAAKjB,MAAMP,QACpBG,YAAaqB,KAAKjB,MAAMJ,YACxBC,MAAOoB,KAAKjB,MAAMH,kB,GAxDlBqB,IAAMC,WCIJC,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTRC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.87c87b23.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Titles = () => (\r\n    <div>\r\n      <h1 className='title-container__title'>Weather By Me! </h1>\r\n      <p className='title-container__subtitle'>Don't Ignore Me To Not Come back Home Wetty</p>\r\n    </div>\r\n  );\r\n\r\n// class Titles extends React.Component {\r\n//   render() {\r\n//     return (\r\n//       <div>\r\n//         <h1>Weather By Me! </h1>\r\n//         <p>Don't Ignore Me To Not Come back Home Wetty</p>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\nexport default Titles;\r\n","import React from \"react\";\r\n\r\n\r\nconst Form = props => (      \r\n  <form onSubmit={props.getWeather}>\r\n    <input type='text' name='city' placeholder='City...'/>   \r\n    <input type='text' name='country' placeholder='Country...'/>\r\n    <button>Get Weather</button>\r\n  </form>\r\n);\r\n\r\n// class Form extends React.Component{\r\n//     render(){\r\n//         return(\r\n            \r\n//            <form onSubmit={this.props.getWeather}>\r\n//              <input type='text' name='city' placeholder='City...'/>   \r\n//              <input type='text' name='country' placeholder='Country...'/>\r\n//              <button>Get Weather</button>\r\n//            </form>\r\n//         );\r\n//     }\r\n// };\r\n\r\nexport default Form;\r\n{/* <span id=\"metric\">  °C</span>\r\n<span id=\"imperial\">°F</span> */}","import React from \"react\";\r\n\r\n// Another way to write component\r\n// if you return 'one parametere' with arrow function you can ==>  delete ()\r\n// if you return 'one element' (div) you can return without return() ==>  only () \r\n\r\nconst Weather = props => \r\n        (\r\n        <div> \r\n            {\r\n            props.city && props.country && \r\n            <p className=\"weather__key\">location: \r\n                <span className=\"weather__value\"> {props.city}, {props.country}</span>   \r\n            </p>\r\n            }\r\n            {\r\n            props.temperature &&  \r\n            <p className=\"weather__key\">Temperature : \r\n                <span className=\"weather__value\"> {props.temperature}</span>\r\n            </p>\r\n            }\r\n            {\r\n            props.humidity && \r\n            <p className=\"weather__key\">Humidity: \r\n                <span className=\"weather__value\"> {props.humidity}</span>\r\n            </p>\r\n            }\r\n            {\r\n            props.description && \r\n            <p className=\"weather__key\">Condtion: \r\n                <span className=\"weather__value\"> {props.description}</span>\r\n            </p>\r\n            } \r\n            {\r\n            props.error && \r\n            <p className=\"weather__key\">\r\n                <span>{props.error}</span>\r\n            </p>\r\n            }  \r\n        </div>\r\n    );\r\n// class Weather extends React.Component{\r\n//     render(){\r\n//         return(\r\n//             <div>\r\n//                 {this.props.city && this.props.country && <p>location: {this.props.city}, {this.props.country}</p>}\r\n//                 {this.props.temperature &&  <p>Temperature : {this.props.temperature}</p>}\r\n//                 {this.props.humidity && <p>Humidity: {this.props.humidity}</p>}\r\n//                 {this.props.description && <p>Condtion: {this.props.description}</p>} \r\n//                 {this.props.error && <p>{this.props.error}</p>}  \r\n//             </div>\r\n//         );\r\n//     }\r\n// };\r\nexport default Weather;","import React from 'react';\nimport Titles from './components/Titles';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\nconst API_KEY = '355d09f9333cc8492ccba2b74ec30d20';\nclass App extends React.Component{\n  // constructor(props){\n  //   super(props);\n  //   this.state= {\n  //                 Old version of react\n  //   }\n  // }\n\n  state = {\n        temperature:undefined,\n        city:undefined,\n        country:undefined,\n        humidity:undefined,\n        description:undefined,\n        error:''\n         }\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n    const data = await api_call.json();\n    if (city && country){\n      // console.log(data)\n    this.setState({\n      temperature:data.main.temp,\n      city:data.name,\n      country:data.sys.country,\n      humidity:data.main.humidity,\n      description:data.weather[0].description,\n      error:''\n    });\n    }else{\n      this.setState({\n        error:'Please Enter Valid City & Country!'\n      });\n    }\n  }\n  render(){\n    return(\n      <div>\n      <div className=\"wrapper\">\n        <div className=\"main\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-xs-5 title-container\">\n                <Titles />\n              </div>\n              <div className=\"col-xs-7 form-container\">\n                <Form getWeather={this.getWeather} />\n                <Weather \n                  temperature={this.state.temperature} \n                  humidity={this.state.humidity}\n                  city={this.state.city}\n                  country={this.state.country}\n                  description={this.state.description}\n                  error={this.state.error}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    );\n  }\n}\nexport default App;\n\n{/* \n        \n         */}","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Lets check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not local host. Just register service worker\r\n          registerValidSW(swUrl);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a \"New content is\r\n                // available; please refresh.\" message in your web app.\r\n                console.log('New content is available; please refresh.');\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        if (\r\n          response.status === 404 ||\r\n          response.headers.get('content-type').indexOf('javascript') === -1\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\";\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}